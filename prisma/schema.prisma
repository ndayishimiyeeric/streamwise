// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]

  files    File[]
  messages Message[]

  userLimit    UserLimit?
  userUsage    UserUsage?
  subscription Subscription?
  aiData       AiData?
  purchases    UserPurchase[]

  aiModels     AIModel[]
  chats        Chat[]
  chatMessages ChatMessage[]
  aiModelSubs  AIModelSub[]
}

model UserLimit {
  id             String   @id @default(uuid())
  userId         String   @unique
  queryLimit     Int      @default(50)
  pdfUploadLimit Int      @default(5)
  maxPagesPdf    Int      @default(5)
  maxFileSize    Int      @default(4)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model UserUsage {
  id             String   @id @default(uuid())
  userId         String   @unique
  queryUsage     Int      @default(0)
  pdfUploadUsage Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model Subscription {
  id                     String    @id @default(uuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
  user                   User      @relation(fields: [userId], references: [id])
}

model UserPurchase {
  id        String   @id @default(uuid())
  userId    String
  amount    Int
  success   Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum FileUploadStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model File {
  id           String           @id @default(uuid())
  userId       String
  name         String
  pages        Int              @default(0)
  uploadStatus FileUploadStatus @default(PENDING)
  url          String           @db.Text
  key          String

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, key, name])
  @@index([userId])
}

model Message {
  id            String  @id @default(uuid())
  text          String  @db.Text
  isUserMessage Boolean @default(false)

  fileId String?
  File   File?   @relation(fields: [fileId], references: [id])
  userId String?
  User   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([fileId])
  @@index([userId])
}

model AiData {
  id     String  @id @default(uuid())
  name   String  @default("My AI")
  bio    String  @default("You are a kind, smart, and creative friend") @db.Text
  imgUrl String? @default("https://utfs.io/f/747c02c6-5938-42d0-9b75-408d6897d5ad-aefp5.png") @db.Text

  userId String @unique
  User   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// New Features for AI Model User Creation

model ModelFile {
  id    String @id @default(uuid())
  name  String
  pages Int    @default(0)
  url   String @db.Text
  key   String

  aiModelId String
  AIModel   AIModel @relation(fields: [aiModelId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([aiModelId])
}

model Chat {
  id        String @id @default(uuid())
  userId    String
  aiModelId String
  text      String @db.Text

  User    User    @relation(fields: [userId], references: [id])
  AIModel AIModel @relation(fields: [aiModelId], references: [id])

  messages ChatMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([aiModelId])
}

model ChatMessage {
  id     String  @id @default(uuid())
  chatId String
  userId String
  text   String  @db.Text
  isUser Boolean @default(false)

  Chat Chat @relation(fields: [chatId], references: [id])
  User User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chatId])
  @@index([userId])
}

model AIModelSub {
  id        String @id @default(uuid())
  aiModelId String
  userId    String

  aiModel AIModel @relation(fields: [aiModelId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([aiModelId, userId])
  @@index([aiModelId])
  @@index([userId])
}

model AIModel {
  id     String @id @default(uuid())
  name   String @default("My Model")
  bio    String @db.Text
  imgUrl String @db.Text

  isPublic Boolean @default(false)

  files ModelFile[]
  chats Chat[]
  subs  AIModelSub[]

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
