// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id     String  @id @unique
  email  String  @unique
  imgUrl String? @db.Text

  File     File[]
  messages Message[]

  userLimit    UserLimit?
  subscription Subscription?
  AiData       AiData?
}

model UserLimit {
  id        String   @id @default(uuid())
  userId    String   @unique
  limit     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Subscription {
  id                     String    @id @default(uuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @unique @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
  user                   User      @relation(fields: [userId], references: [id])
}

enum FileUploadStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model File {
  id           String           @id @default(uuid())
  userId       String
  name         String
  uploadStatus FileUploadStatus @default(PENDING)
  url          String           @db.Text
  key          String

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Message {
  id            String  @id @default(uuid())
  text          String  @db.Text
  isUserMessage Boolean @default(false)

  fileId String?
  File   File?   @relation(fields: [fileId], references: [id])
  userId String?
  User   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([fileId])
  @@index([userId])
}

model AiData {
  id     String  @id @default(uuid())
  name   String  @default("My AI")
  bio    String? @db.Text
  imgUrl String? @db.Text

  userId String @unique
  User   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
